# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    env(COMPOSER_MIRROR_URL): 'https://packagist.org/'
    env(DIST_PATH): '%kernel.project_dir%/dist'
    env(GITLAB_DOMAINE): ~
    env(GITLAB_CLIENT_ID): ~
    env(GITLAB_CLIENT_ID_SECRET): ~
    env(GITLAB_DEFAULT_ROLE): 'ROLE_USER'
    env(EMAIL_SENDER): 'no-reply@exemple.com'

    locale: 'en'
    env(MERCURE_ENABLED): true
    env(MERCURE_PUBLISH_URL): ''
    env(MERCURE_PUBLIC_URL): '%env(MERCURE_PUBLISH_URL)%'
    env(MERCURE_JWT_KEY): ''

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

        bind:
            $distPath: '%env(DIST_PATH)%'
            $mirrorUrl: '%env(COMPOSER_MIRROR_URL)%'
            $gitlabDomain: '%env(GITLAB_DOMAINE)%'
            $gitlabClientId: '%env(GITLAB_CLIENT_ID)%'
            $gitlabClientSecret: '%env(GITLAB_CLIENT_ID_SECRET)%'
            $gitlabDefaultRole: '%env(GITLAB_DEFAULT_ROLE)%'
            $mercureEnabled: '%env(bool:MERCURE_ENABLED)%'
            $mercurePublicUrl: '%env(MERCURE_PUBLIC_URL)%'
            $composerDir: '%kernel.project_dir%/var/composer'
            $sender: '%env(EMAIL_SENDER)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Mercure\JwtProvider:
        arguments:
            $key: '%env(MERCURE_JWT_KEY)%'

    App\EventSubscriber\MercureCookieInjectorSubscriber:
      arguments:
        $mercureJwtKey: '%env(MERCURE_JWT_KEY)%'

    datetime_normalizer:
        class: Symfony\Component\Serializer\Normalizer\DateTimeNormalizer
        public: false
        tags: [serializer.normalizer]

    get_set_method_normalizer:
        class: Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer
        public: false
        tags: [serializer.normalizer]

    converter.doctrine.mongodb:
        class: Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter
        arguments: ['@doctrine_mongodb']
        tags:
        - { name: request.param_converter }


